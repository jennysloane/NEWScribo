[
  {
    "path": "posts/2021-12-03-groupa/",
    "title": "Exploring the relationship between height and sport of Olympic athletes",
    "description": {},
    "author": [
      {
        "name": "Alex Xu, Eamon Jia, Marcus Ke",
        "url": {}
      }
    ],
    "date": "2021-12-03",
    "categories": [],
    "contents": "\r\n\r\n\r\nProject Description\r\nWe decided to use the Olympics dataset. Each member of our group has in depth experience in sport and thus this dataset has attracted our attention as something we all relate to and understand\r\n\r\nResearch Question: We are interested in exploring the relationship between height of Olympic players and the sport that they play. We will specifically look at basketball, volleyball, gymnastics, tennis and soccer.\r\nWe predict that basketball players will have a greater height, due to the great advantage from height in the sport.\r\nWe continue to show the changes in the average heights over time in the mentioned sports\r\nLoad libraries\r\nLibraries are pre-written chunks of R code that help us write our code. Here the tidyverse library helps you “tidy-up” the code. We also load the ggeasy, ggpubr and scales libraries.\r\nThere are lots of libraries written by other R users, for different purposes and users\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(ggeasy)\r\nlibrary(ggpubr)\r\nlibrary(scales)\r\n\r\n\r\n\r\nRead in data\r\nWe can use the read_csv function (the tidyverse version of read.csv) to read in data from the csv file into R.\r\n\r\n\r\nolympics <- read_csv(\"olympics.csv\")\r\n\r\n\r\n\r\nPreview the data\r\nWe have chosen the olympics dataset which contains a massive tibble of the sports, the national olympics committees and various other statistics\r\nIn accordance to the question, the variables we are interested in are the height, and sport of the players. If time allows we may also attempt at the country that the players reside in\r\nBy typing out just the variable name we can see a tibble showing a preview of the data\r\n\r\n\r\nolympics\r\n\r\n\r\n# A tibble: 271,116 x 15\r\n      id name      sex     age height weight team   noc   games   year\r\n   <dbl> <chr>     <chr> <dbl>  <dbl>  <dbl> <chr>  <chr> <chr>  <dbl>\r\n 1     1 A Dijiang M        24    180     80 China  CHN   1992 ~  1992\r\n 2     2 A Lamusi  M        23    170     60 China  CHN   2012 ~  2012\r\n 3     3 Gunnar N~ M        24     NA     NA Denma~ DEN   1920 ~  1920\r\n 4     4 Edgar Li~ M        34     NA     NA Denma~ DEN   1900 ~  1900\r\n 5     5 Christin~ F        21    185     82 Nethe~ NED   1988 ~  1988\r\n 6     5 Christin~ F        21    185     82 Nethe~ NED   1988 ~  1988\r\n 7     5 Christin~ F        25    185     82 Nethe~ NED   1992 ~  1992\r\n 8     5 Christin~ F        25    185     82 Nethe~ NED   1992 ~  1992\r\n 9     5 Christin~ F        27    185     82 Nethe~ NED   1994 ~  1994\r\n10     5 Christin~ F        27    185     82 Nethe~ NED   1994 ~  1994\r\n# ... with 271,106 more rows, and 5 more variables: season <chr>,\r\n#   city <chr>, sport <chr>, event <chr>, medal <chr>\r\n\r\nClean the data\r\nWe created a mini dataset that has only the variables (columns) and rows that we needed to answer our research question. We save this to a new variable\r\nWe use the filter and select functions to filter our individual columns and rows that we need to our research question\r\nAs opposed to the regular filter(XXX == “”), we utilised the %in% function to select multiple sports at once\r\nWe also use na.omit function to omit values that don’t have data\r\nWe can preview the mini dataset\r\nThe %>% function is called the pipe function, which runs another line of code after the previous one\r\n\r\n\r\nolympic_clean <- olympics %>%\r\n  select(height, sport) %>%\r\n  filter(sport %in% c(\"Basketball\", \"Volleyball\", \"Gymnastics\", \"Football\", \"Tennis\")) %>%\r\n  na.omit()\r\n\r\nolympic_clean\r\n\r\n\r\n# A tibble: 32,515 x 2\r\n   height sport     \r\n    <dbl> <chr>     \r\n 1    180 Basketball\r\n 2    175 Gymnastics\r\n 3    175 Gymnastics\r\n 4    175 Gymnastics\r\n 5    175 Gymnastics\r\n 6    175 Gymnastics\r\n 7    175 Gymnastics\r\n 8    175 Gymnastics\r\n 9    175 Gymnastics\r\n10    175 Gymnastics\r\n# ... with 32,505 more rows\r\n\r\nHowever after this we can perceive that the sports have multiple heights because it gets all the heights from each sports rather than the mean\r\nWe can therefore return the mean (average) height of each player with an extra function as shown by the next section\r\nSummary statistics\r\n\r\n\r\nolympic_heights <- olympic_clean %>%\r\n  group_by(sport) %>%\r\n  summarise(mean_height = round(mean(height), 2)) %>%\r\n  arrange(desc(mean_height))\r\n\r\nolympic_heights\r\n\r\n\r\n# A tibble: 5 x 2\r\n  sport      mean_height\r\n  <chr>            <dbl>\r\n1 Basketball        191.\r\n2 Volleyball        187.\r\n3 Tennis            179.\r\n4 Football          175.\r\n5 Gymnastics        163.\r\n\r\nVisualise the results!\r\nIn our bar plot, we put the sport on the x axis (categorical data type), and we put the mean height on the y axis (continuous data type). We decided to use a bar chart to show this, because we are representing categorical and continuous data.\r\nwe use the ggplot function to plot our bar\r\n\r\n\r\nolympic_heights$sport <- factor(olympic_heights$sport)\r\nggplot(olympic_heights, aes(x = fct_reorder(sport, desc(mean_height)), y = mean_height, fill = sport)) +\r\n  geom_bar(stat='identity') +\r\n  theme_bw() +\r\n  coord_cartesian(ylim=c(150,200)) +\r\n  labs(x = \"Sport\",\r\n       y = \"Height(cm)\") +\r\n  scale_fill_manual(values = c(\"#f5cec7\", \"#e79796\", \"#ffc98b\", \"#ffb284\", \"#c6c09c\")) +\r\n  easy_remove_legend()\r\n\r\n\r\n\r\n\r\nFurthermore, we can show the alterations of mean heights of sports over time with this scatter plot.\r\n\r\n\r\nolympic_scatter <- olympics %>%\r\n  select(year, sport, height) %>%\r\n  filter(sport %in% c(\"Basketball\", \"Volleyball\", \"Gymnastics\", \"Football\", \"Tennis\")) %>%\r\n  na.omit() %>%\r\n  group_by(sport, year) %>%\r\n  summarise(mean_height = round(mean(height), 2)) %>%\r\n  arrange(desc(mean_height))\r\n\r\nolympic_scatter\r\n\r\n\r\n# A tibble: 99 x 3\r\n# Groups:   sport [5]\r\n   sport       year mean_height\r\n   <chr>      <dbl>       <dbl>\r\n 1 Basketball  1972        193.\r\n 2 Basketball  1992        193.\r\n 3 Basketball  1984        192.\r\n 4 Basketball  2012        192.\r\n 5 Basketball  2016        192.\r\n 6 Basketball  2008        192.\r\n 7 Basketball  2004        192.\r\n 8 Basketball  1988        191.\r\n 9 Basketball  2000        191 \r\n10 Basketball  1980        191.\r\n# ... with 89 more rows\r\n\r\nggplot(olympic_scatter, aes(x = year, y = mean_height, color = sport)) +\r\n  geom_point(alpha= .2) +\r\n  geom_smooth(method = 'lm') +\r\n  theme_bw() +\r\n  labs(x = \"Year\", \r\n       y = \"Mean Height\")\r\n\r\n\r\n\r\n\r\nSummary\r\nIn conclusion we see that basketball has the highest mean height overall, volleyball is second, tennis is third, football is fourth and gymnastics has the lowest mean height. This is probably due to the different advantages heights give you in the respective sports. In basketball, being tall gives you the advantage of being able to block other players, as well as higher vertical meaning you can more easily dunk and score points. In gymnastics, on the other hand, being shorter means you are more maneuverable, therefore able to do more and score higher.\r\nFurthermore, the scatter plot shows how heights have changed over time in certain sports. This makes us able to predict the heights in the future.\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-12-03-groupa/groupa_files/figure-html5/unnamed-chunk-6-1.png",
    "last_modified": "2021-12-03T21:19:44-05:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-11-18-sample/",
    "title": "Sample Project",
    "description": "This is a sample project using the Olympic dataset",
    "author": [
      {
        "name": "Jenny Sloane",
        "url": {}
      }
    ],
    "date": "2021-11-18",
    "categories": [],
    "contents": "\r\n\r\n\r\nLoad libraries\r\n\r\n\r\nlibrary(tidyverse)\r\nlibrary(ggeasy) # has \"helper\" functions to use with ggplot\r\n\r\n\r\n\r\nRead in data\r\nread in data using read_csv()\r\nsave data to a variable named olympics\r\n\r\n\r\nolympic_data <- read_csv(\"olympics.csv\")\r\n\r\n\r\n\r\nPreview the data\r\n\r\n\r\nhead(olympic_data)\r\n\r\n\r\n# A tibble: 6 x 15\r\n     id name  sex     age height weight team  noc   games  year season\r\n  <dbl> <chr> <chr> <dbl>  <dbl>  <dbl> <chr> <chr> <chr> <dbl> <chr> \r\n1     1 A Di~ M        24    180     80 China CHN   1992~  1992 Summer\r\n2     2 A La~ M        23    170     60 China CHN   2012~  2012 Summer\r\n3     3 Gunn~ M        24     NA     NA Denm~ DEN   1920~  1920 Summer\r\n4     4 Edga~ M        34     NA     NA Denm~ DEN   1900~  1900 Summer\r\n5     5 Chri~ F        21    185     82 Neth~ NED   1988~  1988 Winter\r\n6     5 Chri~ F        21    185     82 Neth~ NED   1988~  1988 Winter\r\n# ... with 4 more variables: city <chr>, sport <chr>, event <chr>,\r\n#   medal <chr>\r\n\r\nResearch question:\r\nWhich national Olympic committees (top 10) won the most medals?\r\nClean and organize our data using Tidyverse\r\nnote noc = national Olympic committee\r\n\r\n\r\nolympics_top10 <- olympic_data %>% # create a new variable with our results\r\n  select(noc, medal) %>% # step 1\r\n  na.omit() %>% # step 2\r\n  group_by(noc) %>% # step 3\r\n  count(name = \"medal_count\") %>% # step 4\r\n  arrange(desc(medal_count)) %>% # step 5\r\n  head(10) # step 6\r\n\r\n\r\n\r\nStep 1: select only the variables that we need in order to answer our research question (this will make working with the data much easier)\r\nStep 2: I noticed there were a lot of “NAs” or missing data, so na.omit() removes all the missing data\r\nStep 3: group by the noc variable\r\nStep 4: get a total count of the number of medals for each noc\r\nStep 5: now we have a row for each noc and a count of how many records they won, so in order to see who won the most medals we’ll arrange our data in descending order so the country with the most medals will be first and the country with the fewest medals will be last\r\nStep 6: finally, we’ll use the head() to select the top 10 rows which gives us the top 10 nocs with the most medals!\r\nSee the results!\r\nHere are the 10 national olympic committees with the most recorded medals\r\n\r\n\r\nolympics_top10\r\n\r\n\r\n# A tibble: 10 x 2\r\n# Groups:   noc [10]\r\n   noc   medal_count\r\n   <chr>       <int>\r\n 1 USA          5637\r\n 2 URS          2503\r\n 3 GER          2165\r\n 4 GBR          2068\r\n 5 FRA          1777\r\n 6 ITA          1637\r\n 7 SWE          1536\r\n 8 CAN          1352\r\n 9 AUS          1320\r\n10 RUS          1165\r\n\r\nVisualise the results!\r\n\r\n\r\n# I've reordered the columns based on the sum of the total variable \r\nggplot(olympics_top10, aes(x = reorder(noc, medal_count, sum), y = medal_count, fill=noc)) + \r\n  geom_col() + \r\n  coord_flip() + # flips the cartesian coordinates to make it easier to read the country names\r\n  labs(x = \"National Olympic Committee\", y = \"Total Medals\") + # you can also add a \"title\" here if you'd like\r\n  theme_bw() + # there are several default themes but I like this one \r\n  easy_remove_legend() + # one of my favorite functions from ggeasy to remove the legend\r\n  easy_text_size(15) # another one of my favorite functions from ggeasy to change the text size\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/2021-11-18-sample/sample_files/figure-html5/unnamed-chunk-6-1.png",
    "last_modified": "2021-11-19T23:09:49-05:00",
    "input_file": {}
  }
]
